##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://www.nginx.com/resources/wiki/start/
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
# https://wiki.debian.org/Nginx/DirectoryStructure
#
# In most cases, administrators will remove this file from sites-enabled/ and
# leave it as reference inside of sites-available where it will continue to be
# updated by the nginx packaging team.
#
# This file will automatically load configuration files provided by other
# applications, such as Drupal or Wordpress. These applications will be made
# available underneath a path with that package name, such as /drupal8.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
#

#定义一个名为allips的limit_req_zone用来存储session，大小是10M内存，
#以$binary_remote_addr 为key,限制平均每秒的请求为20个，
#1M能存储16000个状态，rete的值必须为整数，
#如果限制两秒钟一个请求，可以设置成30r/m

# 规则生效后的返回码
limit_conn_status 503;
limit_req_zone $binary_remote_addr zone=allips:10m rate=30r/s;

upstream vuessr {
  server 0.0.0.0:4000;
  server tiktokvoice.net:4000;
  server www.tiktokvoice.net:4000;
  keepalive 64;
}

upstream lapi_server {
  server 0.0.0.0:2000;
  keepalive 64;
}

upstream api_server {
  server 123.118.8.169:4000;
  server 123.118.8.169:5000;
  keepalive 64;
}

server {

	# SSL configuration
	#
	# listen 443 ssl default_server;
	# listen [::]:443 ssl default_server;
	#
	# Note: You should disable gzip for SSL traffic.
	# See: https://bugs.debian.org/773332
	#
	# Read up on ssl_ciphers to ensure a secure configuration.
	# See: https://bugs.debian.org/765782
	#
	# Self signed certs generated by the ssl-cert package
	# Don't use them in a production server!
	#
	# include snippets/snakeoil.conf;
	#
        

	include workplace_ip.conf;

	server_name tiktokvoice.net www.tiktokvoice.net;

        # 开启 gzip 压缩
        gzip on;
        gzip_min_length 1000;
        gzip_types text/plain text/css application/json application/javascript text/javascript;
        gzip_vary on;

        # 开启 gunzip 解压缩
        gunzip on;

	#root /var/www/html;
	root  /home/aigc/web_service/web;

	# Add index.php to the list if you are using PHP
	index index.html index.htm index.nginx-debian.html;

        #限制每ip每秒不超过20个请求，漏桶数burst为5
        #brust的意思就是，如果第1秒、2,3,4秒请求为19个，
        #第5秒的请求为25个是被允许的。
        #但是如果你第1秒就25个请求，第2秒超过20的请求返回503错误。
        #nodelay，如果不设置该选项，严格使用平均速率限制请求数，
        #第1秒25个请求时，5个请求放到第2秒执行，
        #设置nodelay，25个请求将在第1秒执行。
        limit_req zone=allips burst=50 nodelay;	

	# 增加图片, css, js 缓存
	location ~* \.(css|js)$ {
        	expires 7d;
		add_header Cache-Control public;
	}
	location ~* \.(png|jpg|gif|ico|svg)$ {
        	expires 30d;
		add_header Cache-Control public;
	}

	location ~* (audio_prompt.wav|converted.mp3)$ {
        	expires 7d;
		add_header Cache-Control public;
	}

	location /api {
		if ($request_method = OPTIONS) {
                    add_header Access-Control-Allow-Origin $http_origin;
		    add_header Access-Control-Allow-Credentials 'true';
		    add_header Access-Control-Allow-Headers 'content-type';
                    add_header Access-Control-Allow-Headers *;
                    return 200;
                }
                add_header Access-Control-Allow-Origin $http_origin;
	        add_header Access-Control-Allow-Credentials 'true';
                add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
		add_header Access-Control-Allow-Headers 'content-type';
                add_header Access-Control-Allow-Headers *;
		proxy_set_header Host $proxy_host; #修改转发请求头，让8080端口的应用可以收到真实的请求
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_pass http://api_server; #端口转发
		#proxy_pass http://$backend:4000; #端口转发
		#proxy_pass http://5w5w.cn; #端口转发
		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
		#try_files $uri $uri/ =404;
	}

	location /outimage/wavcl {
		if ($request_method = OPTIONS) {
                    return 200;
                }
		proxy_set_header Host $proxy_host; #修改转发请求头，让8080端口的应用可以收到真实的请求
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_pass http://$backend:8181; #端口转发
		#proxy_pass http://5w5w.cn; #端口转发
		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
		#try_files $uri $uri/ =404;
	}

	location /lapi/ {
		if ($request_method = OPTIONS) {
                    add_header Access-Control-Allow-Origin $http_origin;
                    #add_header Access-Control-Allow-Origin '*';
		    add_header Access-Control-Allow-Credentials 'true';
                    add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
		    add_header Access-Control-Allow-Headers 'content-type, Origin, Accept, Authorization';
                    return 200;
                }
                add_header Access-Control-Allow-Origin $http_origin;
                #add_header Access-Control-Allow-Origin '*';
	        add_header Access-Control-Allow-Credentials 'true';
                add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
		add_header Access-Control-Allow-Headers 'content-type, Origin, Accept, Authorization';
		proxy_set_header Host $proxy_host; #修改转发请求头，让8080端口的应用可以收到真实的请求
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_pass http://lapi_server; #端口转发
		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
		#try_files $uri $uri/ =404;
	}

	location ^~ /user/ {
		if ($request_method = OPTIONS) {
                    add_header Access-Control-Allow-Origin $http_origin;
                    #add_header Access-Control-Allow-Origin '*';
		    add_header Access-Control-Allow-Credentials 'true';
                    add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
		    add_header Access-Control-Allow-Headers 'content-type, Origin, Accept, Authorization';
                    return 200;
                }
                add_header Access-Control-Allow-Origin $http_origin;
                #add_header Access-Control-Allow-Origin '*';
	        add_header Access-Control-Allow-Credentials 'true';
                add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
		add_header Access-Control-Allow-Headers 'content-type, Origin, Accept, Authorization';
		proxy_set_header Host $proxy_host; #修改转发请求头，让8080端口的应用可以收到真实的请求
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_pass http://vuessr; #端口转发
		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
		#try_files $uri $uri/ =404;
	}

	location = / {
                 add_header Cross-Origin-Opener-Policy 'same-origin-allow-popups';
		 proxy_set_header Host $proxy_host; #修改转发请求头，让8080端口的应用可以收到真实的请求
		 proxy_set_header X-Real-IP $remote_addr;
		 proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		 proxy_pass http://vuessr; #端口转发
		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
		try_files $uri $uri/ =404;
	}

	location ~* ^/(en|zh|ja|ko|vi|th|hi|fa|ru|de|fr|ro|cs|es|pt|bn|it|ar|ur|zh-tw|ms|tr|pl|nl|uk)$ {
                 add_header Cross-Origin-Opener-Policy 'same-origin-allow-popups';
		 proxy_set_header Host $proxy_host; #修改转发请求头，让8080端口的应用可以收到真实的请求
		 proxy_set_header X-Real-IP $remote_addr;
		 proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		 proxy_pass http://vuessr; #端口转发
		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
		# try_files $uri $uri/ =404;
		index index.html index.htm index.nginx-debian.html;
	}

	location ~* ^/(en|zh|ja|ko|vi|th|hi|fa|ru|de|fr|ro|cs|es|pt|bn|it|ar|ur|zh-tw|ms|tr|pl|nl|uk)/ {
                 add_header Cross-Origin-Opener-Policy 'same-origin-allow-popups';
		 proxy_set_header Host $proxy_host; #修改转发请求头，让8080端口的应用可以收到真实的请求
		 proxy_set_header X-Real-IP $remote_addr;
		 proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		 proxy_pass http://vuessr; #端口转发
		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
		# try_files $uri $uri/ =404;
		index index.html index.htm index.nginx-debian.html;
	}

       location /blog/ {
		if (-f $request_filename/index.html) {
		    rewrite (.*) $1/index.html break;
		}
		if (-f $request_filename/index.php) {
		    rewrite (.*) $1/index.php last;
		}
		if (!-f $request_filename) {
		    rewrite ^(.*)$ /blog/index.php last;
		}
       }

       location ~ .*\.php$ {
                # root /home/aigc/service/typecho; 
                # include snippets/fastcgi-php.conf;
                include /etc/nginx/fastcgi.conf;

                # With php-cgi (or other tcp sockets): # 监听tcp端口方式
                fastcgi_pass 127.0.0.1:6000;
       }

	location / {
		# proxy_set_header Host $proxy_host; #修改转发请求头，让8080端口的应用可以收到真实的请求
		# proxy_set_header X-Real-IP $remote_addr;
		# proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		# proxy_pass http://$backend:8181; #端口转发
		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
		try_files $uri $uri/ =404;
	}

	#location /api/ {
	#	proxy_set_header Host $proxy_host; #修改转发请求头，让8080端口的应用可以收到真实的请求
	#	proxy_set_header X-Real-IP $remote_addr;
	#	proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
	#	proxy_pass http://123.118.1.220:8181; #端口转发
	#	# First attempt to serve request as file, then
	#	# as directory, then fall back to displaying a 404.
	#	#try_files $uri $uri/ =404;
	#}

	#location /vue/ {
	#	alias /home/web/web_service/vuedemo/;
	#	try_files $uri $uri/ =404;
	#	index index.html;

	#}

	#location = / {
	#	add_header Access-Control-Allow-Origin *;
	#	add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
	#	#add_header Access-Control-Allow-Headers 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization';
	#	add_header Access-Control-Allow-Headers *;
	#	root /home/aigc/web_service/static;
	#	try_files $uri $uri/ =404;
	#	index index.html index.htm index.nginx-debian.html;
	#}

	# pass PHP scripts to FastCGI server
	#
	#location ~ \.php$ {
	#	include snippets/fastcgi-php.conf;
		
	#
	#	# With php-fpm (or other unix sockets):
	#	fastcgi_pass unix:/run/php/php7.4-fpm.sock;
	#	# With php-cgi (or other tcp sockets):
	#	fastcgi_pass 127.0.0.1:9000;
	#}

	# deny access to .htaccess files, if Apache's document root
	# concurs with nginx's one
	#
	#location ~ /\.ht {
	#	deny all;
	#}

    listen [::]:443 ssl ipv6only=on; # managed by Certbot
    listen 443 ssl http2; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/tiktokvoice.net/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/tiktokvoice.net/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot

}


# Virtual Host configuration for example.com
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#
#server {
#	listen 80;
#	listen [::]:80;
#
#	server_name example.com;
#
#	root /var/www/example.com;
#	index index.html;
#
#	location / {
#		try_files $uri $uri/ =404;
#	}
#}

server {
    if ($host = www.tiktokvoice.net) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    if ($host = tiktokvoice.net) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


	listen 80 default_server;
	listen [::]:80 default_server;

	server_name tiktokvoice.net www.tiktokvoice.net;
    return 404; # managed by Certbot



}
